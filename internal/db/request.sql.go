// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: request.sql

package db

import (
	"context"
	"time"
)

const createRequest = `-- name: CreateRequest :one
INSERT INTO request (
  type,
  phone,
  pick_up_latitude,
  pick_up_longitude,
  drop_off_latitude,
  drop_off_longitude,
  price
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, type, phone, pick_up_latitude, pick_up_longitude, drop_off_latitude, drop_off_longitude, price, status, created_at, expire_at
`

type CreateRequestParams struct {
	Type             string  `json:"type"`
	Phone            string  `json:"phone"`
	PickUpLatitude   float64 `json:"pick_up_latitude"`
	PickUpLongitude  float64 `json:"pick_up_longitude"`
	DropOffLatitude  float64 `json:"drop_off_latitude"`
	DropOffLongitude float64 `json:"drop_off_longitude"`
	Price            float64 `json:"price"`
}

func (q *Queries) CreateRequest(ctx context.Context, arg CreateRequestParams) (Request, error) {
	row := q.db.QueryRowContext(ctx, createRequest,
		arg.Type,
		arg.Phone,
		arg.PickUpLatitude,
		arg.PickUpLongitude,
		arg.DropOffLatitude,
		arg.DropOffLongitude,
		arg.Price,
	)
	var i Request
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Phone,
		&i.PickUpLatitude,
		&i.PickUpLongitude,
		&i.DropOffLatitude,
		&i.DropOffLongitude,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.ExpireAt,
	)
	return i, err
}

const deleteRequest = `-- name: DeleteRequest :exec
DELETE FROM request
WHERE phone = $1
`

func (q *Queries) DeleteRequest(ctx context.Context, phone string) error {
	_, err := q.db.ExecContext(ctx, deleteRequest, phone)
	return err
}

const getRequest = `-- name: GetRequest :one
SELECT id, type, phone, pick_up_latitude, pick_up_longitude, drop_off_latitude, drop_off_longitude, price, status, created_at, expire_at FROM request
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRequest(ctx context.Context, id int64) (Request, error) {
	row := q.db.QueryRowContext(ctx, getRequest, id)
	var i Request
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Phone,
		&i.PickUpLatitude,
		&i.PickUpLongitude,
		&i.DropOffLatitude,
		&i.DropOffLongitude,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.ExpireAt,
	)
	return i, err
}

const getRequestByPhone = `-- name: GetRequestByPhone :one
SELECT id, type, phone, pick_up_latitude, pick_up_longitude, drop_off_latitude, drop_off_longitude, price, status, created_at, expire_at FROM request
WHERE phone = $1 LIMIT 1
`

func (q *Queries) GetRequestByPhone(ctx context.Context, phone string) (Request, error) {
	row := q.db.QueryRowContext(ctx, getRequestByPhone, phone)
	var i Request
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Phone,
		&i.PickUpLatitude,
		&i.PickUpLongitude,
		&i.DropOffLatitude,
		&i.DropOffLongitude,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.ExpireAt,
	)
	return i, err
}

const listRequests = `-- name: ListRequests :many
SELECT id, type, phone, pick_up_latitude, pick_up_longitude, drop_off_latitude, drop_off_longitude, price, status, created_at, expire_at FROM request
WHERE created_at >= $3
  AND created_at <= $4
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListRequestsParams struct {
	Limit     int32     `json:"limit"`
	Offset    int32     `json:"offset"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
}

func (q *Queries) ListRequests(ctx context.Context, arg ListRequestsParams) ([]Request, error) {
	rows, err := q.db.QueryContext(ctx, listRequests,
		arg.Limit,
		arg.Offset,
		arg.StartDate,
		arg.EndDate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Request
	for rows.Next() {
		var i Request
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Phone,
			&i.PickUpLatitude,
			&i.PickUpLongitude,
			&i.DropOffLatitude,
			&i.DropOffLongitude,
			&i.Price,
			&i.Status,
			&i.CreatedAt,
			&i.ExpireAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStatusRequest = `-- name: UpdateStatusRequest :one
UPDATE request
SET status = $2
WHERE phone = $1
RETURNING id, type, phone, pick_up_latitude, pick_up_longitude, drop_off_latitude, drop_off_longitude, price, status, created_at, expire_at
`

type UpdateStatusRequestParams struct {
	Phone  string `json:"phone"`
	Status string `json:"status"`
}

func (q *Queries) UpdateStatusRequest(ctx context.Context, arg UpdateStatusRequestParams) (Request, error) {
	row := q.db.QueryRowContext(ctx, updateStatusRequest, arg.Phone, arg.Status)
	var i Request
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Phone,
		&i.PickUpLatitude,
		&i.PickUpLongitude,
		&i.DropOffLatitude,
		&i.DropOffLongitude,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.ExpireAt,
	)
	return i, err
}
