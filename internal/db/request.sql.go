// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: request.sql

package db

import (
	"context"
	"database/sql"
)

const createRequest = `-- name: CreateRequest :one
INSERT INTO request (
  type,
  passenger_id,
  pick_up_latitude,
  pick_up_longitude,
  drop_off_latitude,
  drop_off_longitude
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, type, passenger_id, phone, pick_up_latitude, pick_up_longitude, drop_off_latitude, drop_off_longitude, status, created_at, expire_at
`

type CreateRequestParams struct {
	Type             string        `json:"type"`
	PassengerID      sql.NullInt64 `json:"passenger_id"`
	PickUpLatitude   float64       `json:"pick_up_latitude"`
	PickUpLongitude  float64       `json:"pick_up_longitude"`
	DropOffLatitude  float64       `json:"drop_off_latitude"`
	DropOffLongitude float64       `json:"drop_off_longitude"`
}

func (q *Queries) CreateRequest(ctx context.Context, arg CreateRequestParams) (Request, error) {
	row := q.db.QueryRowContext(ctx, createRequest,
		arg.Type,
		arg.PassengerID,
		arg.PickUpLatitude,
		arg.PickUpLongitude,
		arg.DropOffLatitude,
		arg.DropOffLongitude,
	)
	var i Request
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.PassengerID,
		&i.Phone,
		&i.PickUpLatitude,
		&i.PickUpLongitude,
		&i.DropOffLatitude,
		&i.DropOffLongitude,
		&i.Status,
		&i.CreatedAt,
		&i.ExpireAt,
	)
	return i, err
}

const deleteRequest = `-- name: DeleteRequest :exec
DELETE FROM request
WHERE id = $1
`

func (q *Queries) DeleteRequest(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRequest, id)
	return err
}

const getRequest = `-- name: GetRequest :one
SELECT id, type, passenger_id, phone, pick_up_latitude, pick_up_longitude, drop_off_latitude, drop_off_longitude, status, created_at, expire_at FROM request
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRequest(ctx context.Context, id int64) (Request, error) {
	row := q.db.QueryRowContext(ctx, getRequest, id)
	var i Request
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.PassengerID,
		&i.Phone,
		&i.PickUpLatitude,
		&i.PickUpLongitude,
		&i.DropOffLatitude,
		&i.DropOffLongitude,
		&i.Status,
		&i.CreatedAt,
		&i.ExpireAt,
	)
	return i, err
}

const getRequestByPassengerID = `-- name: GetRequestByPassengerID :one
SELECT id, type, passenger_id, phone, pick_up_latitude, pick_up_longitude, drop_off_latitude, drop_off_longitude, status, created_at, expire_at FROM request
WHERE passenger_id = $1 LIMIT 1
`

func (q *Queries) GetRequestByPassengerID(ctx context.Context, passengerID sql.NullInt64) (Request, error) {
	row := q.db.QueryRowContext(ctx, getRequestByPassengerID, passengerID)
	var i Request
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.PassengerID,
		&i.Phone,
		&i.PickUpLatitude,
		&i.PickUpLongitude,
		&i.DropOffLatitude,
		&i.DropOffLongitude,
		&i.Status,
		&i.CreatedAt,
		&i.ExpireAt,
	)
	return i, err
}

const listRequests = `-- name: ListRequests :many
SELECT id, type, passenger_id, phone, pick_up_latitude, pick_up_longitude, drop_off_latitude, drop_off_longitude, status, created_at, expire_at FROM request
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListRequestsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRequests(ctx context.Context, arg ListRequestsParams) ([]Request, error) {
	rows, err := q.db.QueryContext(ctx, listRequests, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Request
	for rows.Next() {
		var i Request
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.PassengerID,
			&i.Phone,
			&i.PickUpLatitude,
			&i.PickUpLongitude,
			&i.DropOffLatitude,
			&i.DropOffLongitude,
			&i.Status,
			&i.CreatedAt,
			&i.ExpireAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStatusRequest = `-- name: UpdateStatusRequest :one
UPDATE request
SET status = $2
WHERE id = $1
RETURNING id, type, passenger_id, phone, pick_up_latitude, pick_up_longitude, drop_off_latitude, drop_off_longitude, status, created_at, expire_at
`

type UpdateStatusRequestParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateStatusRequest(ctx context.Context, arg UpdateStatusRequestParams) (Request, error) {
	row := q.db.QueryRowContext(ctx, updateStatusRequest, arg.ID, arg.Status)
	var i Request
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.PassengerID,
		&i.Phone,
		&i.PickUpLatitude,
		&i.PickUpLongitude,
		&i.DropOffLatitude,
		&i.DropOffLongitude,
		&i.Status,
		&i.CreatedAt,
		&i.ExpireAt,
	)
	return i, err
}
